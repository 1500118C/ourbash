#! /bin/bash
clear

printf "7.1 Set Password Expiration Days\n"
printf "Checking user account defaults: (Password Max Days)\n"
maxDays=$(grep ^PASS_MAX_DAYS /etc/login.defs | grep -o '[0-9]*')
if [ $maxDays -le 90 ]; then
	printf "\e[32m$maxDays Pass\e[0m\n"
else
	printf "\e[31m$maxDays Fail\e[0m\n"
	printf "Please run remediation\n"
fi
USER=$(cat /etc/passwd | grep "/bin/bash" | cut -d : -f 1)
list=(${USER})
printf "Checking existing user accounts: (Password Max Days)\n"
for i in "${list[@]}"
do
	day=$(chage -l $i | grep "Maximum number" | cut -d : -f 2)
	if [ $day -le 90 ]; then 
		printf "\e[32m$i $day Pass\e[0m\n"
	else
		printf "\e[31m$i $day Fail\e[0m\n"
		printf "Please run remediation\n"
	fi
done


printf "\n7.2 Set Password Change Minimum Number of Days\n"
printf "Checking user account defaults: (Password Min Days)\n"
minDays=$(grep ^PASS_MIN_DAYS /etc/login.defs | grep -o '[0-9]*')
if [ $minDays -ge 7 ]; then
	printf "\e[32m$minDays Pass\e[0m\n"
else
	printf "\e[31m$minDays Fail\e[0m\n"
	printf "Please run remediation\n"
fi
USER=$(cat /etc/passwd | grep "/bin/bash" | cut -d : -f 1)
list=(${USER})
printf "Checking existing user accounts: (Password Min Days)\n"
for i in "${list[@]}"
do
	day=$(chage -l $i | grep "Minimum number" | cut -d : -f 2)
	if [ $day -ge 7 ]; then 
		printf "\e[32m$i $day Pass\e[0m\n"
	else
		printf "\e[31m$i $day Fail\e[0m\n"
		printf "Please run remediation\n"
	fi
done


printf "\n7.3 Set Password Expiring Warning Days\n"
printf "Checking user account defaults: (Password Exp Warning Days)\n"
expDays=$(grep ^PASS_WARN_AGE /etc/login.defs | grep -o '[0-9]*')
if [ $expDays -ge 7 ]; then
	printf "\e[32m$expDays Pass\e[0m\n"
else
	printf "\e[31m$expDays Fail\e[0m\n"
	printf "Please run remediation\n"
fi
USER=$(cat /etc/passwd | grep "/bin/bash" | cut -d : -f 1)
list=(${USER})
printf "Checking existing user accounts: (Password Exp Warning Days)\n"
for i in "${list[@]}"
do
	day=$(chage -l $i | grep "warning" | cut -d : -f 2)
	if [ $day -ge 7 ]; then 
		printf "\e[32m$i $day Pass\e[0m\n"
	else
		printf "\e[31m$i $day Fail\e[0m\n"
		printf "Please run remediation\n"
	fi
done


printf "\n7.4 Disable User Accounts\n"
RESULT=$(egrep -v "^\+" /etc/passwd | awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $3<1000 && $7!="/usr/sbin/nologin" && $7!="/sbin/nologin" && $7!="/bin/false")')
if [ -z $RESULT ]; then
  printf "\e[32mSuccessful\e[0m\n"
else
  printf "\e[31mYour account should be locked! Please run remediation!\e[0m\n"
  egrep -v "^\+" /etc/passwd | awk -F: '($1!="root" && $1!="sync" && $1!="shutdown" && $1!="halt" && $3<1000 && $7!="/usr/sbin/nologin" && $7!="/sbin/nologin")' |  cut -d : -f 1 
fi


printf "\n7.5 Set Default Group for root Account\n"
printf "Checking for root's default group\n"
DGROUP=$(grep "^root:" /etc/passwd | cut -f4 -d:)
echo $DGROUP
if [ "$DGROUP" -eq 0 ]; then
	printf "\033[33;32m PASS \n"
else
	printf "\033[33;31m FAIL \n"
fi
echo  -en "\e[0m"


printf "\n7.6 Set Default umask for Users\n"
printf "Checking umask for users\n "
if grep "umask 077" /etc/bashrc | grep "umask 077" /etc/profile.d/* >/dev/null; then
	printf "\033[33;32mPASSED, umask is already set to 077. \n"
else
	printf "\033[33;31mFAILED, please set umask to 077. \n"
fi 
echo  -en "\e[0m"


printf "\n7.7 Lock Inactive User Accounts\n"
printf "Checking for days until accounts deactivates\n"
if useradd -D | grep INACTIVE=35 >/dev/null; then
	printf "\033[33;32m PASS \n"
else
	printf "\033[33;31m FAIL \n"
fi
echo  -en "\e[0m"


printf "\n7.8 Ensure Password Fields are Not Empty\n"
printf "Checking that password fields are not empty"
PFieldsNEmpty= $(cat /etc/shadow | awk -F: '($2 == "" ) { print $1 " does not have a password "}')
echo $PFieldsNEmpty
if [ -z "$PFieldsNEmpty" ]; then
	printf "\033[33;32m PASS \n"
else
	printf "\033[33;31m FAIL \n"
fi
echo  -en "\e[0m"


printf "\n7.9 Verify No Legacy "+" Entries Exist in /etc/passwd, /etc/shadow and /etc/group files\n"
printf "Checking that no Legacy Entries exist in etc/passwd, /etc/shadow and /etc/group files\n"
PASSWD=$(grep '^+:' /etc/passwd)
SHADOW=$(grep '^+:' /etc/shadow)
GROUP=$(grep '^+:' /etc/group)
#echo $PASSWD
#echo $SHADOW
#echo $GROUP
if [ -z "$PASSWD" ] && [ -z "$SHADOW" ] && [ -z "$GROUP" ]; then
	printf "\033[33;32m PASS \n"
else
	printf "\033[33;31m FAIL \n"
fi
echo  -en "\e[0m"


printf "\n7.10 Verify No UID 0 Accounts Exist Other Than root\n"
printf "Checking that no UID 0 exist besides root\n"
VerifyUIDRoot=$(/bin/cat /etc/passwd | /bin/awk -F: '($3 == 0){print $1}')
echo $VerifyUIDRoot
if [ "$VerifyUIDRoot" = 'root' ]
then
	printf "\033[33;32m PASS \n"
else
	printf "\033[33;31m FAIL \n"
fi
echo  -en "\e[0m"
